<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance | vladium</title>
    <link>/tags/performance/</link>
      <atom:link href="/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <description>performance</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© vladium 2019</copyright><lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>performance</title>
      <link>/tags/performance/</link>
    </image>
    
    <item>
      <title>Checking bounds checking in Julia</title>
      <link>/post/20191016/checking-bounds-checking-in-julia/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/20191016/checking-bounds-checking-in-julia/</guid>
      <description>


&lt;p&gt;Ever since my &lt;a href=&#34;../../../tutorials/study_julia_with_me/knapsack_benchmark/&#34;&gt;knapsack benchmark&lt;/a&gt; I’ve been curious why Julia was still &lt;span class=&#34;math inline&#34;&gt;\(\approx 50\%\)&lt;/span&gt; slower than either Java or C++ on what essentially were a couple of nested &lt;tt&gt;for&lt;/tt&gt;-loops over a pair of arrays. I’ve done some exploring and now believe that my first guess was correct: much of the remaining Julia overhead is due to its &lt;em&gt;bounds checking&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&#34;eliding-bounds-checking-unconditionally-with-inbounds&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eliding bounds checking unconditionally with &lt;strong&gt;&lt;span class=&#34;citation&#34;&gt;@inbounds&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;My first test was to isolate all &lt;code&gt;opt_value()&lt;/code&gt; lines with array access into a &lt;code&gt;begin...end&lt;/code&gt; block and annotate it with &lt;a href=&#34;https://docs.julialang.org/en/v1/devdocs/boundscheck/#Eliding-bounds-checks-1&#34;&gt;@inbounds&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;    function opt_value(W ::Int64, items ::Array{Item}) ::Int64
    ...
    @inbounds(
      begin
          V[items[1].weight:end] .= items[1].value
          ...
          for j in 2 : n
              V, V_prev = V_prev, V
              itemⱼ = items[j]
              for w in 1 : W
                  V_without_itemⱼ = V_prev[w]
              ...
              end
          end
      end
    )
    ...&lt;/code&gt;&lt;/pre&gt;
Here is the data from the original benchmark with added new timing measurements of the above version, labeled &lt;code&gt;julia.ib&lt;/code&gt;:
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:fraction&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/checking-bounds-checking-in-julia_files/figure-html/fraction-1.png&#34; alt=&#34;Calculation time as a function of problem size. **julia.ib** labels data obtained from an @inbounds-annotated Julia implementation.&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Calculation time as a function of problem size. &lt;strong&gt;julia.ib&lt;/strong&gt; labels data obtained from an &lt;span class=&#34;citation&#34;&gt;@inbounds-annotated&lt;/span&gt; Julia implementation.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Nice! With bounds checks elided Julia performance is now in line with Java and C++: its underperformance has decreased to a maximum of &lt;span class=&#34;math inline&#34;&gt;\(\approx 15\%\)&lt;/span&gt;. And Julia is now even the champion for small problem sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;peeking-at-differences-in-generated-code-via-code_native&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Peeking at differences in generated code via &lt;strong&gt;&lt;span class=&#34;citation&#34;&gt;@code_native&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Another neat facility of Julia allows me to examine JIT-compiled code very easily and right from my REPL session:&lt;/p&gt;
&lt;pre class=&#34;julia-repl&#34;&gt;&lt;code&gt;julia&amp;gt; d = Knapsack.make_random_data(5_000, 12345)
(5000, Main.Knapsack.Item[Main.Knapsack.Item(609, 6198), ...

julia&amp;gt; @code_native debuginfo=:none Knapsack.opt_value(d[1],d[2])
    .text
    pushq   %rbp
    movq    %rsp, %rbp
    ...
L1165:
    movl    $2, %edx
    jmp L825
    nopw    (%rax,%rax)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t show the full asm listing because that’s not particularly useful unless you’re a low-level programmer. Comparing it with and without &lt;code&gt;@inbounds&lt;/code&gt; does confirm, however, that the former version is shorter: about 200 instructions instead of 320.&lt;/p&gt;
&lt;p&gt;It is more instructive to look at the compiled version(s) of a simpler function that simply extracts a single slot from an input array:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;function getit(a ::Array{Int64})
    return a[123]
end&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia-repl&#34;&gt;&lt;code&gt;julia&amp;gt; @code_native getit(rand(Int64, 1000))
    .text
; ┌ @ work.jl:185 within `getit&amp;#39;
; │┌ @ work.jl:185 within `getindex&amp;#39;
    cmpq    $122, 8(%rdi)
    jbe L18
    movq    (%rdi), %rax
    movq    976(%rax), %rax
; │└
    retq
L18:
    pushq   %rbp
    movq    %rsp, %rbp
; │ @ work.jl:185 within `getit&amp;#39;
; │┌ @ array.jl:728 within `getindex&amp;#39;
    movq    %rsp, %rax
    leaq    -16(%rax), %rsi
    movq    %rsi, %rsp
    movq    $123, -16(%rax)
    movabsq $jl_bounds_error_ints, %rax
    movl    $1, %edx
    callq   *%rax
    nopl    (%rax)
; └└&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the instructions to check the fixed (and 0-based) index against the array input length (&lt;tt&gt;cmpq $122, 8(%rdi)&lt;/tt&gt;) followed by a conditional jump to native C routine &lt;a href=&#34;https://github.com/JuliaLang/julia/blob/master/src/rtutils.c&#34;&gt;jl_bounds_error_ints()&lt;/a&gt; that creates and throws a &lt;code&gt;BoundsError&lt;/code&gt; exception object. The following version of &lt;code&gt;getit()&lt;/code&gt;, with the only array indexing expression annotated with &lt;code&gt;@inbounds&lt;/code&gt;, is much shorter:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;function getit(a ::Array{Int64})
    return @inbounds a[123]
end&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia-repl&#34;&gt;&lt;code&gt;julia&amp;gt; @code_native getit(rand(Int64, 1000))
    .text
; ┌ @ work.jl:185 within `getit&amp;#39;
; │┌ @ work.jl:185 within `getindex&amp;#39;
    movq    (%rdi), %rax
    movq    976(%rax), %rax
; │└
    retq
    nopl    (%rax,%rax)
; └&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;disabling-bounds-checking-from-command-line&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Disabling bounds checking from command line&lt;/h2&gt;
&lt;p&gt;It seems that I can get disable bounds checking summarily using &lt;tt&gt;–check-bounds=no&lt;/tt&gt; option:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;gt;julia --check-bounds=no Knapsack.jl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The documentation is somewhat sparse, but it appears that when this option is used it will completely override all &lt;code&gt;@inbounds&lt;/code&gt; annotations in the source code, i.e. either all checks are done in a mandatory fashion (“yes”) or none are (“no”). This could be used for “debug” vs “release” calculation runs. However, since bounds checking affects code as it’s being generated, some more documentation is needed to understand how this option works with “pre-compiled” packages and Julia “system” code. I also would like to understand the functionality and use cases for the &lt;a href=&#34;https://docs.julialang.org/en/v1/devdocs/boundscheck/#Propagating-inbounds-1&#34;&gt;@propagate_inbounds macro&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
