[{"authors":["admin"],"categories":null,"content":"Vlad Roubtsov works on stochastic and simulation-based optimization problems at a large retailer. He leverages his cross-disciplinary background (physics, math, computer science) to bridge quantitative research with software development.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"258be61fc6f4ec5204c804c5b2f71116","permalink":"/authors/vlad/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/vlad/","section":"authors","summary":"Vlad Roubtsov works on stochastic and simulation-based optimization problems at a large retailer. He leverages his cross-disciplinary background (physics, math, computer science) to bridge quantitative research with software development.","tags":null,"title":"Vlad Roubtsov","type":"authors"},{"authors":null,"categories":null,"content":" Introduction and welcome Greetings! I work on stochastic optimization and simulation problems and happen to have extensive background in both \u0026ldquo;high productivity\u0026rdquo; and \u0026ldquo;high performance\u0026rdquo; programming languages. I had my first peek at Julia a few years ago. The concept was great and the new language certainly had a real, uncrowded niche to fit in: something that promised to be both high productivity and high performance. But right then it was brand new and the ecosystem just didn\u0026rsquo;t feel organized or stable enough for \u0026ldquo;production use\u0026rdquo;.\nA few years later, Julia v1.0 milestone has been achieved, there is an IDE or two, university classes are abandoning MATLAB/octave in favor of Julia, and new Julia books are coming out with increasing frequency. Now it appears to me that Julia is much more mature and ready for another, more thorough, examination. For this reason, I invite you to take part in this study group.\nPurpose What do we plan to get out of this study? A couple of things, at least:\n Julia does not look like a radically new programming language to me. Rather, it appears to combine many of the best and most modern aspects of language design in order to support productive scientific programming. I would us like to understand the main paradigms in Julia so that we can judge where and when it would be the most effective choice for research work.\n As a component of overall productivity, I care about language performance in both interactive and parallel/distributed settings. I would like us to put Julia speed claims to the test.\n Julia is still quite new (v1.0 just shipped in 2018) and good study material is a little hard to come by. We could look at some existing open-source tools for operations research and machine learning as examples of working Julia projects, and perhaps prototype a few of our own in the process.\n  Study agenda (open to feedback) At a high level, these are the topics I\u0026rsquo;d like us to cover (not necessarily in the order shown and subject to feedback and suggestions from the group):\n language design and capabilities: core types, generic functions/multiple dispatch, metaprogramming, parallel/distributed programming, etc. general purpose tooling: IDE, plotting, debugging, profiling, etc. native support and tools for OR, ML, and statistics: dataframes, built-in linear algebra, JuMP, JuML, etc.  Each week I would us like to formulate a practical question or need and investigate a solution (or lack thereof) within the Julia ecosystem, at which point I will document it here. Some example questions off the top of my head are:\n What\u0026rsquo;s this I hear about Julia being \u0026ldquo;fast\u0026rdquo;? How does it compare with Python or R? How about C++? I have an optimization problem that needs a custom algorithm not covered by off-the-shelf solvers \u0026ndash; should I consider a (pure) Julia implementation? Conversely, I have a bog-standard LP model \u0026ndash; is there still an advantage to working with it in Julia? How do I develop a Julia package, or, more generally, have workflow that\u0026rsquo;s good for research that I want to share with colleagues? Julia is marketed as good for parallel computing \u0026ndash; what\u0026rsquo;s the reality of this claim? \u0026hellip; and so on, as long as there are useful topics to explore.  Prerequisites I think it would be helpful to have some experience with one or two of the languages that Julia aims to (will eventually?) replace: R, Matlab, Python, and others of that ilk. Julia also borrows from JIT\u0026rsquo;ed languages like Java, so familiarity with those can only help.\n","date":1569024000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1569024000,"objectID":"7ee0ab098699d251db43779d8f3524d3","permalink":"/tutorials/study_julia_with_me/","publishdate":"2019-09-21T00:00:00Z","relpermalink":"/tutorials/study_julia_with_me/","section":"tutorials","summary":"Ongoing study of topics from language design, operations research, and computer/data sciences.","tags":null,"title":"Study Julia with me","type":"docs"},{"authors":null,"categories":null,"content":" Suggested software setup I have been using Julia successfully on MacOS and Linux (Fedora). I would suggest starting with a JuliaPro installer for this study. I’ve kept a few notes about my install process:\n I’ve been using v1.2 so far, both REPL and Juno “IDE”.\n on MacOS you will need to have XCode tools installed, see the install guide on Linux the install guide mentions needing these libs (install via yum/dnf/apt-get/etc, I only needed to add xclip):   xclip libXScrnSaver apparently, starting with v1.2 what’s included appears to have changed: to minimize the installer size the “curated list of packages” are no longer part of the download itself. They can be installed via the usual Pgk commands. What’s different for “curated” packages is that the install will be configured to use Julia Computing’s github repo1 so that only the supposedly tested versions are available. Using Julia Computing’s repo will require authenticating to get their token. Keep this in mind if you plan to play with packages outside of their supported list.\n for REPL you can use Juno’s “REPL” tab. I find that doing so gives me experince similar to that of RStudio (a good thing):\n   if you prefer not to rely on the IDE (which is not that great right now) and use REPL (which is very functional), you can use julia binary from your JuliaPro distribution:  MacOS: /Applications/JuliaPro-\u0026lt;version\u0026gt;.app/Contents/Resources/julia/Contents/Resources/julia/bin/julia Linux: \u0026lt;install dir\u0026gt;/Julia/bin/julia    FAQs and tips for fellow Julia explorers General  it is recommended to keep work code in a module (which could be as simple as keeping it inside a module MyModule ... end block) even for one-off stuff: onlike, say, R or Python Julia currently does not allow rebinding names of functions and types without restarting the REPL session. It seems to have gone through various iterations of solutions for this workflow need, but right now re-include()ing a module seems to be what’s guaranteed to work.  there is also Revise.jl (which I haven’t tried yet) see this discussion for more color  another reason for working inside a module is because code will run faster (it will be JIT’ed sooner)   Juno Juno is basically a few packages inside Atom. It is not quite an “IDE” at this point. Visual Studio Code might be a reasonable alternative, but in my experiments VSC had trouble with Julia v1.2. Juno comes bundled with a julia build from the same entity.\n as a result of being a collection of Atom packages, some things you might want to tweak in the UI could be dispersed over multiple places. For example:  “Julia Client” package:  you may wish to choose positioning of various tabs: Workspace, Documentation, Plots, REPL, etc  “tool-bar” package:  you might want to opt for smaller icons “Always Open Existing”, “Auto Reveal” settings might be of interest      Books, other resources There is a constantly growing list of resources at https://julialang.org. I list below some resources that I’ve either used myself or that seemed to stand out from the rest.\nbooks about or based on Julia v1.0+:  “Think Julia: How to Think Like a Computer Scientist” by Ben Lauwens and Allen Downey.  this is the only “pure computer science” Julia book in my list.  “A Deep Introduction to Julia for Data Science and Scientific Computing” by Chris Rackauckas.  the author is very active in Julia space; this material seems very good (if you’re ok with notebooks).  “Statistics with Julia: Fundamentals for Data Science, Machine Learning and Artificial Intelligence” by Hayden Klok and Yoni Nazarathy (2019 draft PDF free from the authors).  based on a statistics course at the University of Queensland; Julia crash course in Chapter 1 and a handy “How-to” in Appendix A.  “Algorithms for Optimization” by Mykel Kochenderfer and Tim Wheeler.  advanced undergrad/grad course textbook on optimization; get it if optimization is your thing; Appendix A is a decent compact Julia intro.  “Julia Programming for Operations Research, 2nd ed.” by Changhyun Kwon.  another Julia crash course chapter; JuMP workship.    reference docs:  “Julia 1.2 Documentation”, HTML and PDF. “Introducing Julia” Wikibook, a nice complement to the language manual.   video lectures, talks:  “Intro to Julia 1.0” by Jane Herriman of Julia Computing. Videos from JuliaCon 2019 – some good stuff, particularly by Julia creators.   online practice:  Julia Box from Julia Computing has a free plan. Julia exercism track looks like a good collection of exercises     Julia packages are maintained as git repos.↩\n   ","date":1569196800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569196800,"objectID":"6ec89205fad3531788dfe071506387c4","permalink":"/tutorials/study_julia_with_me/structure/","publishdate":"2019-09-23T00:00:00Z","relpermalink":"/tutorials/study_julia_with_me/structure/","section":"tutorials","summary":"Suggested software setup I have been using Julia successfully on MacOS and Linux (Fedora). I would suggest starting with a JuliaPro installer for this study. I’ve kept a few notes about my install process:\n I’ve been using v1.2 so far, both REPL and Juno “IDE”.\n on MacOS you will need to have XCode tools installed, see the install guide on Linux the install guide mentions needing these libs (install via yum/dnf/apt-get/etc, I only needed to add xclip):   xclip libXScrnSaver apparently, starting with v1.","tags":null,"title":"","type":"docs"}]